// ------------------------------------------------------------
// Combat Knife
// ------------------------------------------------------------
class HDStabber:IdleDummy{
	default{
		+bloodlessimpact +nodecal +hittracer +puffonactors
		stamina 1;
	}
}

const HDLD_KNIFE="knf";

class HDCombatKnife:HDFist{
	default{
		+hdweapon.fitsinbackpack
		//-hdweapon.dontnull
		-nointeraction
		-inventory.untossable
		+forceXYbillboard
		+rollsprite
		+rollcenter
		+hdweapon.reverseguninertia
		radius 3;height 3;
		inventory.pickupmessage "You got the combat knife!";
		hdweapon.barrelsize 1,1,1;
		obituary "%o got shanked by %k.";
		weapon.slotnumber 1;
		weapon.slotpriority 2.1;
		scale 0.6;
		//+FLATSPRITE
		tag "Combat Knife";
		hdweapon.refid HDLD_KNIFE;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse);}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Stab\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_RELOAD.."   Distracting strike\n"
		..WEPHELP_FIREMODE.."   Grab/Drag\n"
		..WEPHELP_UNLOAD.."   Distracting projectile\n"
		;
	}
	
	override string,double getpickupsprite(){return "KNFPZ0",0.35;}
	
	override double weaponbulk(){
		return 15;
	}
	override double gunmass(){
		return 6;
	}

	action void HDStab(int dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,54,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(angle,54,pitch,punchline.hitline?(countinv("PowerStrength")?random(50,120):random(5,15)):0,"none",
			countinv("PowerStrength")?"BulletPuffMedium":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		HDBleedingWound.inflict(punchee,dmg*frandom(0.6,1.6));

		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "HDBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Punched %s for %i damage!",pch,dmg));
		}
		if(dmg*2>punchee.health)punchee.A_StartSound("misc/bulletflesh",CHAN_BODY);  
		if(punchee.health>0)punchee.damagemobj(self,self,dmg,"SmallArms0");
		//else HDF.Give(punchee,"SawGib",dmg*0.2);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	states{
	
	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_WeaponBusy();
			A_SetCrosshair(21);
			A_SetHelpText();
			
			invoker.weaponstatus[FRAGS_FORCE]=0;

			return resolvestate("select0");
		}
		select0:
		CKF0 E 0;
		goto select0small;
	deselect:
		TNT1 A 0 A_StartDeselect();
	deselect0:
		CKF0 E 0;
		goto deselect0small;
		
	ready:
		CKF0 E 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	reload:
	flick:
		CKF0 A 1 offset(0,50) A_Lunge();
		#### A 1 offset(0,36);
		#### A 0 A_JumpIfInventory("PowerStrength",1,"ZerkFlick");
		#### AAAAAAA 0 A_CustomPunch((1),1,CPF_PULLIN,"HDFistPuncher",36);
		goto flickend;
	zerkflick:
		#### AAAAAAA 0 A_CustomPunch((random(1,3)),1,CPF_PULLIN,"HDFistPuncher",36);
	flickend:
		#### AA 1 offset(0,38){invoker.flicked=true;}
		#### A 1 offset(0,42);
		#### A 1 offset(0,50);
		goto fire;
	fire:
	hold:
	althold:
	startfire:
		CKF0 A 0 A_JumpIfInventory("PowerStrength",1,"zerkpunch");
		goto punch;
	punch:
		CKF0 C 1 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE);
		#### D 0 HDStab(15);
		#### D 6;
		#### CB 3;
		#### E 3;
		#### E 0 A_JumpIf(pressingaltfire(),"altfire");
		#### E 1 A_ReFire();
		goto ready;
	zerkpunch:
		CKF0 D 0 {A_Recoil(-1); A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE);}
		#### D 0 HDStab(invoker.flicked?150:110);
		#### D 3;
		#### CBE 1;
		#### E 1;
		#### E 0 A_JumpIf(pressingaltfire(),"altfire");
		#### E 2 A_ReFire();
		goto ready;
	altfire:
		CKF0 E 1 offset(0,36);
		#### E 1 offset(0,50);
		#### E 2 A_CheckFloor("lunge");
		goto kick;
	lunge:
		TNT1 A 0 A_Lunge();
		TNT1 AA 1{
			if(countinv("PowerStrength"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("PowerStrength"))A_SetTics(8);
		}
		CKF0 A 0 A_Refire();
		goto ready;
	grabhold:
		CKF0 A 1 {invoker.weaponstatus[FRAGS_FORCE]=50;}
		TNT1 A 0 A_JumpIf(pressingfire(),"YEET");
		TNT1 A 0 A_JumpIf(pressingfiremode(),"grabhold");
		goto nope;
	firemode:
	grab:
	grab2:
		CKF0 A 1 offset(0,52);
		#### A 1 offset(0,32);
		goto grabhold;
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
	spawn:
		KNFP X 0 A_JumpIf(invoker.bNOEXTREMEDEATH==true,"spawn2");
		KNFP Y 1;
		loop;
	spawn2:
		KNFP X 1 A_SetPitch(15+pitch);
		loop;
	spawn3:
		KNFP X 1;
		loop;
	
	
	death:
		KNFP X 1 {
		invoker.bjustchucked=false;
		A_SpawnItemEx("BulletPuffSmall");
		A_NoGravity();
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	Xdeath:
		KNFP X 1 {
		invoker.bjustchucked=false;
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	Crash:
		KNFP X 1 {
		invoker.bjustchucked=false;
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	unload:
		#### E 0;
		goto nope;
	ohnomyknife:
		tnt1 a 0;
		stop;
	}
}
